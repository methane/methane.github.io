<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Python Bytes</title>
    <link>http://methane.github.io/categories/python/</link>
    <description>Recent content in Python on Python Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Sun, 01 Feb 2015 00:00:00 UT</lastBuildDate>
    <atom:link href="http://methane.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Welcome to PyMySQL, Mike Bayer (@zzzeek)!</title>
      <link>http://methane.github.io/2015/02/welcome-to-pymysql-zzzeek/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 UT</pubDate>
      
      <guid>http://methane.github.io/2015/02/welcome-to-pymysql-zzzeek/</guid>
      <description>&lt;p&gt;There are three major MySQL Driver in Python: MySQL-python, PyMySQL and MySQL-Connector/Python.&lt;/p&gt;

&lt;p&gt;Since MySQL-python&amp;rsquo;s development is slowdown, I&amp;rsquo;ve made fork named &amp;ldquo;mysqlclient-python&amp;rdquo;.  It supports Python 3 and fixed some bugs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also only active maintainer of PyMySQL. It means I maintains &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of Python-MySQL world.
But I have several interest other than MySQL. I have 9-month old baby. Additionally, I&amp;rsquo;m not good at writing English.
So I&amp;rsquo;m not a good maintainer. Python/MySQL world is stopped compared with Python/PostgreSQL.&lt;/p&gt;

&lt;p&gt;But last weekend, Mike Bayer (@zzzeek, SQLAlchemy developer) posted one mail to PyMySQL Users ML.
It said OpenStack developers considering about moving from MySQL-python to PyMySQL, and ask a question about can I review and accept pull requests from Mike and OpenStack developers.&lt;/p&gt;

&lt;p&gt;The answer is &amp;hellip; No!  I will not have enough time.&lt;/p&gt;

&lt;p&gt;But this is a huge chance to me and Python/MySQL world. SQLAlchemy is one of greatest O/R mapper in Python. OpenStack is one of most active project in Python. I invited him to PyMySQL Organization on Github and he agreed readily.&lt;/p&gt;

&lt;p&gt;Despite I&amp;rsquo;m not a good document/test writer, I have some experience of high performance Python and asynchronous I/O programming.
So I want to improve PyMySQL with Mike and OpenStack.&lt;/p&gt;

&lt;p&gt;On the other hand, I have some ideas about improving mysqlclient-python: Support new async APIs in MariaDB&amp;rsquo;s connectors, use ctypes or cffi to improve performance on PyPy. But I have enough time. So I decided not doing them in foreseeable future. It doesn&amp;rsquo;t means mysqlclient-python is deprecated. It will be stable MySQL driver as it has so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faster unicode access from Python 3.3/C API</title>
      <link>http://methane.github.io/2014/12/fast-utf8-encode/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 UT</pubDate>
      
      <guid>http://methane.github.io/2014/12/fast-utf8-encode/</guid>
      <description>

&lt;p&gt;Python 3.3 intorduces &lt;a href=&#34;https://www.python.org/dev/peps/pep-0393/&#34;&gt;PEP 393 Flexible String Representation&lt;/a&gt;.
This is not only memory efficient, but also make it fast especially extension module.
Before Python 3.3, there are no way to build unicode by byte-to-byte operation.  Since Python 3.3,
you can do it for ASCII or Latin-1 string.&lt;/p&gt;

&lt;h2 id=&#34;pep-393-summarized:f558fad8cd1c1826bc94968b224919bb&#34;&gt;PEP 393 summarized&lt;/h2&gt;

&lt;p&gt;There are some internal representation for unicode.&lt;/p&gt;

&lt;h3 id=&#34;compact-non-ascii:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Compact (non ASCII)&lt;/h3&gt;

&lt;p&gt;Compact representation is basic form of unicode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+--------+--------+------+-------+--------------+-------+-------------+--------------+
| Header | length | hash | *wstr | utf-8 length | *utf8 | wstr_length | DATA ... NUL |
+--------+--------+------+-------+--------------+-------+-------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DATA is array of codepoints.  Each code point have size of 1byte, 2byte or 4byte (KIND).
When unicode only contains latin-1 chars (and contains no-ASCII chars), each codepoint is represented 1byte.&lt;/p&gt;

&lt;p&gt;wstr and utf8 is cache for Python/C API.  When calling &lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; or &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt;, utf8 cache is created.
This is how it encode utf-8:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    if (PyUnicode_UTF8(unicode) == NULL) {
        assert(!PyUnicode_IS_COMPACT_ASCII(unicode));
        bytes = _PyUnicode_AsUTF8String(unicode, &amp;quot;strict&amp;quot;);
        if (bytes == NULL)
            return NULL;
        _PyUnicode_UTF8(unicode) = PyObject_MALLOC(PyBytes_GET_SIZE(bytes) + 1);
        if (_PyUnicode_UTF8(unicode) == NULL) {
            PyErr_NoMemory();
            Py_DECREF(bytes);
            return NULL;
        }
        _PyUnicode_UTF8_LENGTH(unicode) = PyBytes_GET_SIZE(bytes);
        Py_MEMCPY(_PyUnicode_UTF8(unicode),
                  PyBytes_AS_STRING(bytes),
                  _PyUnicode_UTF8_LENGTH(unicode) + 1);
        Py_DECREF(bytes);
    }

    if (psize)
        *psize = PyUnicode_UTF8_LENGTH(unicode);
    return PyUnicode_UTF8(unicode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is slower and inefficient than &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; since it has additional malloc and memcpy.
You should prefer &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; except that you know cache is used later.&lt;/p&gt;

&lt;h3 id=&#34;compact-ascii:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Compact ASCII&lt;/h3&gt;

&lt;p&gt;ASCII string is special:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utf-8 length == length&lt;/li&gt;
&lt;li&gt;utf-8 data == data&lt;/li&gt;
&lt;li&gt;wstr length == length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it is more compact than compact representation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+--------+--------+------+-------+--------------+
| Header | length | hash | *wstr | DATA ... NUL |
+--------+--------+------+-------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; and &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; doesn&amp;rsquo;t create cache.  You can use it free.&lt;/p&gt;

&lt;h3 id=&#34;legacy:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Legacy&lt;/h3&gt;

&lt;p&gt;Legacy representation is only for support deprecated APIs.&lt;/p&gt;

&lt;h2 id=&#34;case-1-ultrajson-https-github-com-esnme-ultrajson:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Case 1: &lt;a href=&#34;https://github.com/esnme/ultrajson&#34;&gt;UltraJSON&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;UltraJSON is fast JSON encoder and decoder.&lt;/p&gt;

&lt;p&gt;Typical JSON contains many ascii strings.  Encoding to utf-8 can be skipped when unicode is Compact ASCII.
Otherwise, I don&amp;rsquo;t use &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; since it can be slower and memory inefficient.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# https://github.com/esnme/ultrajson/pull/159
diff --git a/python/objToJSON.c b/python/objToJSON.c
index e56aa9b..a5b2f62 100644
--- a/python/objToJSON.c
+++ b/python/objToJSON.c
@@ -145,7 +145,17 @@ static void *PyStringToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, siz
 static void *PyUnicodeToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
   PyObject *obj = (PyObject *) _obj;
-  PyObject *newObj = PyUnicode_EncodeUTF8 (PyUnicode_AS_UNICODE(obj), PyUnicode_GET_SIZE(obj), NULL);
+  PyObject *newObj;
+#if (PY_VERSION_HEX &amp;gt;= 0x03030000)
+  if(PyUnicode_IS_COMPACT_ASCII(obj))
+  {
+    Py_ssize_t len;
+    char *data = PyUnicode_AsUTF8AndSize(obj, &amp;amp;len);
+    *_outLen = len;
+    return data;
+  }
+#endif
+  newObj = PyUnicode_AsUTF8String(obj);
   if(!newObj)
   {
     return NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 15.8 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 7.14 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;case-2-meinheld-https-github-com-mopemope-meinheld:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Case 2: &lt;a href=&#34;https://github.com/mopemope/meinheld&#34;&gt;meinheld&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;meinheld is fast WSGI server.  It can be used with &lt;a href=&#34;http://gunicorn.org/&#34;&gt;gunicorn&lt;/a&gt; or &lt;a href=&#34;http://circus.readthedocs.org/&#34;&gt;circus&lt;/a&gt; + &lt;a href=&#34;https://chaussette.readthedocs.org/&#34;&gt;chaussette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTTP header field name is ASCII.  And &lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/&#34;&gt;PEP 3333&lt;/a&gt; specifies field value should be decoded by latin-1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PyUnicode_New()&lt;/code&gt; accepts maxchar as second argument. When maxchar&amp;lt;128, it creates Compact ASCII unicode.&lt;/p&gt;

&lt;p&gt;Since field name is ASCII, environment name like &lt;code&gt;&amp;quot;HTTP_ACCEPT_ENCODING&amp;quot;&lt;/code&gt; can be created as Compact ASCII.&lt;/p&gt;

&lt;p&gt;field value may contain non-ASCII characters.  So I use &lt;code&gt;PyUnicode_DecodeLatin1()&lt;/code&gt;.  It checks maxchar and create best unicode representation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mopemope/meinheld/blob/c47cdba7a1fe6a80dc8a4f9f2ac5288104f1102f/meinheld/server/response.c#L44-L59&#34;&gt;Here&lt;/a&gt;
is how to create header string in &lt;code&gt;char*&lt;/code&gt; from unicode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;static int
wsgi_to_bytes(PyObject *value, char **data, Py_ssize_t *len)
{
#ifdef PY3
    if (!PyUnicode_Check(value)) {
        PyErr_Format(PyExc_TypeError, &amp;quot;expected unicode object, value &amp;quot;
                     &amp;quot;of type %.200s found&amp;quot;, value-&amp;gt;ob_type-&amp;gt;tp_name);
        return -1;
    }
    if (PyUnicode_READY(value) == -1) {
        return -1;
    }
    if (PyUnicode_KIND(value) != PyUnicode_1BYTE_KIND) {
        PyErr_SetString(PyExc_ValueError,
                        &amp;quot;unicode object contains non latin-1 characters&amp;quot;);
        return -1;
    }
    *len = PyUnicode_GET_SIZE(value);
    *data = (char*)PyUnicode_1BYTE_DATA(value);
    return 0;
#else
    return PyBytes_AsStringAndSize(value, data, len);
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, it convert unicode to bytes with &lt;code&gt;PyUnicode_AsLatin1String()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before this change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
^T^N  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   385.68us   25.67us 843.00us   74.12%
    Req/Sec    12.42k   632.30    13.78k    59.64%
  234475 requests in 10.00s, 39.13MB read
Requests/sec:  23448.18
Transfer/sec:      3.91MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   379.78us   24.96us   0.90ms   73.86%
    Req/Sec    12.46k   639.91    14.00k    52.45%
  235688 requests in 10.00s, 39.33MB read
Requests/sec:  23569.38
Transfer/sec:      3.93MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   388.15us   24.65us 524.00us   73.31%
    Req/Sec    12.43k   623.66    13.78k    55.26%
  234899 requests in 10.00s, 39.20MB read
Requests/sec:  23490.25
Transfer/sec:      3.92MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   339.98us   65.87us   4.33ms   92.45%
    Req/Sec    13.56k     1.43k   15.44k    81.82%
  253189 requests in 10.00s, 42.26MB read
Requests/sec:  25319.67
Transfer/sec:      4.23MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   364.82us   78.85us   1.01ms   84.10%
    Req/Sec    12.99k     1.81k   15.44k    80.63%
  243685 requests in 10.00s, 40.67MB read
Requests/sec:  24368.90
Transfer/sec:      4.07MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   329.00us   22.40us 464.00us   73.99%
    Req/Sec    13.66k   760.36    15.44k    61.95%
  258730 requests in 10.00s, 43.18MB read
Requests/sec:  25873.60
Transfer/sec:      4.32MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>