<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Python Bytes</title>
    <link>https://methane.github.io/posts/</link>
    <description>Recent content in Posts on Python Bytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://methane.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reduce allocation in Go code</title>
      <link>https://methane.github.io/2015/02/reduce-allocation-in-go-code/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://methane.github.io/2015/02/reduce-allocation-in-go-code/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve implemented parameter interpolation in &lt;a href=&#34;https://github.com/go-sql-driver/mysql&#34;&gt;go-sql-driver/mysql&lt;/a&gt;. You can enable it by adding &amp;ldquo;interpolateParams=true&amp;rdquo; option to dsn.&lt;/p&gt;

&lt;p&gt;Why this feature is important is described in &lt;a href=&#34;https://vividcortex.com/blog/2014/11/19/analyzing-prepared-statement-performance-with-vividcortex/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://eng.uservoice.com/blog/2015/01/28/introducing-gocraft/dbr/&#34;&gt;here&lt;/a&gt;. I don&amp;rsquo;t say lot about it here.&lt;/p&gt;

&lt;p&gt;When writing low level library like MySQL driver, you can&amp;rsquo;t assume user&amp;rsquo;s performance requirements. Especially, avoiding memory allocations is important. Go&amp;rsquo;s GC is not so fast. And everyone want memory usage of their server is stable.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve reduced allocations in the interpolation as possible. This post describes how I did it and coding tips to avoid allocations.&lt;/p&gt;

&lt;h2 id=&#34;1-write-it-correct:29df4c67b192e7f62a16d98407a447bd&#34;&gt;1. Write it correct.&lt;/h2&gt;

&lt;p&gt;Since it was new feature, I wrote it quickly like writing Python code. (Go can be used like Python or C!).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve made pull request with &amp;ldquo;[RFC]&amp;rdquo; in title. We&amp;rsquo;ve discussed about feature and rough design first.&lt;/p&gt;

&lt;h2 id=&#34;2-write-benchmark-program:29df4c67b192e7f62a16d98407a447bd&#34;&gt;2. Write benchmark program.&lt;/h2&gt;

&lt;p&gt;Before starting tuning, I&amp;rsquo;ve prepared benchmark program to confirm performance difference.&lt;/p&gt;

&lt;p&gt;Writing benchmark program in Go is easy: Write function like &lt;code&gt;BenchmarkXxxx(b *testing.B)&lt;/code&gt; in &lt;code&gt;xxx_test.go&lt;/code&gt;. To see allocations, call &lt;code&gt;b.ReportAllocs()&lt;/code&gt; in it.&lt;/p&gt;

&lt;p&gt;Here is benchmark function I&amp;rsquo;ve wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BenchmarkInterpolation(b *testing.B) {
	mc := &amp;amp;mysqlConn{
		cfg: &amp;amp;config{
			interpolateParams: true,
			loc:               time.UTC,
		},
		maxPacketAllowed: maxPacketSize,
		maxWriteSize:     maxPacketSize - 1,
	}

	args := []driver.Value{
		int64(42424242),
		float64(math.Pi),
		false,
		time.Unix(1423411542, 807015000),
		[]byte(&amp;quot;bytes containing special chars &#39; \&amp;quot; \a \x00&amp;quot;),
		&amp;quot;string containing special chars &#39; \&amp;quot; \a \x00&amp;quot;,
	}
	q := &amp;quot;SELECT ?, ?, ?, ?, ?, ?&amp;quot;

	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		_, err := mc.interpolateParams(q, args)
		if err != nil {
			b.Fatal(err)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go test -bench=BenchmarkInterpolation
PASS
BenchmarkInterpolation	  300000	      3887 ns/op	    1144 B/op	      15 allocs/op
ok  	github.com/go-sql-driver/mysql	2.386s
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-identify-allocations:29df4c67b192e7f62a16d98407a447bd&#34;&gt;3. Identify allocations&lt;/h2&gt;

&lt;p&gt;When setting &lt;code&gt;allocfreetrace=1&lt;/code&gt; to environment variable &lt;code&gt;GODEBUG&lt;/code&gt;, you can see stacktrace where allocation occures (&lt;a href=&#34;http://golang.org/pkg/runtime/#pkg-overview&#34;&gt;reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But using it while running &lt;code&gt;go test -bench=BenchmarkInterpolation&lt;/code&gt; makes huge log including large noise. To reduce log, build &lt;code&gt;mysql.test&lt;/code&gt; with &lt;code&gt;go test -c&lt;/code&gt; and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go test -c
$ GODEBUG=allocfreetrace=1 ./mysql.test -test.run=none -test.bench=BenchmarkInter -test.benchtime=10ms 2&amp;gt;trace.log
PASS
BenchmarkInterpolation      5000          4095 ns/op        1144 B/op         15 allocs/op
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-test.run=none&lt;/code&gt; prevents running tests before benchmark. &lt;code&gt;-test.benchtime=10ms&lt;/code&gt; reduces execution time and log size.&lt;/p&gt;

&lt;p&gt;Now I have &lt;code&gt;trace.log&lt;/code&gt;. Open it with vim and search &lt;code&gt;interpolateParams&lt;/code&gt;. Cut unnecessary stacktrace before it. I can see stacktrace like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tracealloc(0xc2080100e0, 0x70, string)
goroutine 5 [running]:
runtime.mallocgc(0x70, 0x22e4e0, 0x0, 0x2)
	/usr/local/Cellar/go/1.4.1/libexec/src/runtime/malloc.go:327 +0x32a fp=0xc20802ea60 sp=0xc20802e9b0
runtime.newarray(0x22e4e0, 0x7, 0x15c5e)
	/usr/local/Cellar/go/1.4.1/libexec/src/runtime/malloc.go:365 +0xc1 fp=0xc20802ea98 sp=0xc20802ea60
runtime.makeslice(0x2229c0, 0x7, 0x7, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.4.1/libexec/src/runtime/slice.go:32 +0x15c fp=0xc20802eae0 sp=0xc20802ea98
strings.genSplit(0x30c190, 0x17, 0x2e1f10, 0x1, 0x0, 0x7, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.4.1/libexec/src/strings/strings.go:287 +0x14d fp=0xc20802eb60 sp=0xc20802eae0
strings.Split(0x30c190, 0x17, 0x2e1f10, 0x1, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.4.1/libexec/src/strings/strings.go:325 +0x76 fp=0xc20802ebb0 sp=0xc20802eb60
github.com/go-sql-driver/mysql.(*mysqlConn).interpolateParams(0xc20802eed0, 0x30c190, 0x17, 0xc20802ee70, 0x6, 0x6, 0x0, 0x0, 0x0, 0x0)
	/Users/inada-n/go1.4/src/github.com/go-sql-driver/mysql/connection.go:180 +0x86 fp=0xc20802ed38 sp=0xc20802ebb0
github.com/go-sql-driver/mysql.BenchmarkInterpolation(0xc20806a400)
	/Users/inada-n/go1.4/src/github.com/go-sql-driver/mysql/benchmark_test.go:240 +0x437 fp=0xc20802ef58 sp=0xc20802ed38
testing.(*B).runN(0xc20806a400, 0x1)
	/usr/local/Cellar/go/1.4.1/libexec/src/testing/benchmark.go:124 +0x95 fp=0xc20802ef68 sp=0xc20802ef58
testing.(*B).launch(0xc20806a400)
	/usr/local/Cellar/go/1.4.1/libexec/src/testing/benchmark.go:199 +0x78 fp=0xc20802efd8 sp=0xc20802ef68
runtime.goexit()
	/usr/local/Cellar/go/1.4.1/libexec/src/runtime/asm_amd64.s:2232 +0x1 fp=0xc20802efe0 sp=0xc20802efd8
created by testing.(*B).run
	/usr/local/Cellar/go/1.4.1/libexec/src/testing/benchmark.go:179 +0x3e

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This stacktrace shows &lt;code&gt;strings.Split()&lt;/code&gt; called from &lt;code&gt;interpolateParams()&lt;/code&gt; cause allocation. You can see also filename and line number (&lt;code&gt;connection.go:180&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (mc *mysqlConn) interpolateParams(query string, args []driver.Value) (string, error) {
	chunks := strings.Split(query, &amp;quot;?&amp;quot;)
	if len(chunks) != len(args)+1 {
		return &amp;quot;&amp;quot;, driver.ErrSkip
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-tuning-up:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4. Tuning up&lt;/h2&gt;

&lt;p&gt;OK. It&amp;rsquo;s time to start optimize. Let&amp;rsquo;s record current benchmark result. I use it later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go test -bench=BenchmarkInterpolation | tee old.txt
PASS
BenchmarkInterpolation	  500000	      3942 ns/op	    1144 B/op	      15 allocs/op
ok  	github.com/go-sql-driver/mysql	3.219s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-1-avoid-concatenate-strings-use-byte-and-append:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.1. Avoid concatenate strings, Use []byte and append&lt;/h3&gt;

&lt;p&gt;My first version is very Pythonic. When interpolating &lt;code&gt;db.Exec(&amp;quot;SELECT SLEEP(?)&amp;quot;, 42)&lt;/code&gt;, my code did like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;parts := []string{&amp;quot;SELECT SLEEP(&amp;quot;, escape(42), &amp;quot;)&amp;quot;}
query := strings.Join(parts, &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Go&amp;rsquo;s string is immutable, making temporary string cause allocations. So I replaced &lt;code&gt;stirngs.Join()&lt;/code&gt; with &lt;code&gt;[]byte&lt;/code&gt; and &lt;code&gt;append&lt;/code&gt;. I can use &lt;code&gt;strconv.AppendInt()&lt;/code&gt; and &lt;code&gt;strconv.AppendFloat()&lt;/code&gt; to avoid temporal string when formatting int64 and float64.&lt;/p&gt;

&lt;p&gt;Now my code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	buf := make([]byte, 0, estimatedSize)
	argPos := 0

	for _, c := range []byte(query) {
		if c != &#39;?&#39; {
			buf = append(buf, c)
			continue
		}

		arg := args[argPos]
		argPos++

		if arg == nil {
			buf = append(buf, []byte(&amp;quot;NULL&amp;quot;)...)
			continue
		}

		switch v := arg.(type) {
		case int64:
			buf = strconv.AppendInt(buf, v, 10)
                ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-2-use-benchcmp:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.2. Use benchcmp&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve made first optimization. Let&amp;rsquo;s measure it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;benchcmp&lt;/code&gt; is famous tool to compare benchmark result. You can include it&amp;rsquo;s output in commit log. It makes your commit looks cool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get -u golang.org/x/tools/cmd/benchcmp
$ go test -bench=BenchmarkInterpolation &amp;gt; new.txt
$ benchcmp old.txt new.txt
benchmark                  old ns/op     new ns/op     delta
BenchmarkInterpolation     3942          2573          -34.73%

benchmark                  old allocs     new allocs     delta
BenchmarkInterpolation     15             6              -60.00%

benchmark                  old bytes     new bytes     delta
BenchmarkInterpolation     1144          560           -51.05%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see number of allocation is reduced from 15 to 6.
Execution time and memory consumption are also reduced.&lt;/p&gt;

&lt;h3 id=&#34;4-3-avoid-time-format:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.3. Avoid Time.Format()&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;time.Time&lt;/code&gt; doesn&amp;rsquo;t provides methods like &lt;code&gt;strconv.AppendInt()&lt;/code&gt;.
To avoid making temporary string, I&amp;rsquo;ve wrote it myself.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;		case time.Time:
			if v.IsZero() {
				buf = append(buf, []byte(&amp;quot;&#39;0000-00-00&#39;&amp;quot;)...)
			} else {
				fmt := &amp;quot;&#39;2006-01-02 15:04:05.999999&#39;&amp;quot;
				if v.Nanosecond() == 0 {
					fmt = &amp;quot;&#39;2006-01-02 15:04:05&#39;&amp;quot;
				}
				s := v.In(mc.cfg.loc).Format(fmt)
				buf = append(buf, []byte(s)...)
			}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After (including other improvements):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;		case time.Time:
			if v.IsZero() {
				buf = append(buf, &amp;quot;&#39;0000-00-00&#39;&amp;quot;...)
			} else {
				v := v.In(mc.cfg.loc)
				v = v.Add(time.Nanosecond * 500) // To round under microsecond
				year := v.Year()
				year100 := year / 100
				year1 := year % 100
				month := v.Month()
				day := v.Day()
				hour := v.Hour()
				minute := v.Minute()
				second := v.Second()
				micro := v.Nanosecond() / 1000

				buf = append(buf, []byte{
					&#39;\&#39;&#39;,
					digits10[year100], digits01[year100],
					digits10[year1], digits01[year1],
					&#39;-&#39;,
					digits10[month], digits01[month],
					&#39;-&#39;,
					digits10[day], digits01[day],
					&#39; &#39;,
					digits10[hour], digits01[hour],
					&#39;:&#39;,
					digits10[minute], digits01[minute],
					&#39;:&#39;,
					digits10[second], digits01[second],
				}...)

				if micro != 0 {
					micro10000 := micro / 10000
					micro100 := micro / 100 % 100
					micro1 := micro % 100
					buf = append(buf, []byte{
						&#39;.&#39;,
						digits10[micro10000], digits01[micro10000],
						digits10[micro100], digits01[micro100],
						digits10[micro1], digits01[micro1],
					}...)
				}
				buf = append(buf, &#39;\&#39;&#39;)
			}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It reduces two allocations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    benchmark                  old allocs     new allocs     delta
    BenchmarkInterpolation     6              4              -33.33%
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-4-avoid-range-when-iterating-string:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.4. Avoid &lt;code&gt;range&lt;/code&gt; when iterating string&lt;/h3&gt;

&lt;p&gt;Usually, &lt;code&gt;range&lt;/code&gt; is used for iterating slice. But &lt;code&gt;for _, c := range s&lt;/code&gt; (where &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;string&lt;/code&gt;) produces &lt;code&gt;rune&lt;/code&gt;, not &lt;code&gt;byte&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My first code used &lt;code&gt;for i, c := range([]byte(s)) {&lt;/code&gt;. But Go 1.4 make new slice and copy &lt;code&gt;s&lt;/code&gt; to it. (Go 1.5 optimize it out).&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve used C-like for loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@@ -210,8 +210,8 @@ func (mc *mysqlConn) interpolateParams(query string, args []driver.Value) (strin
        buf := make([]byte, 0, estimated)
        argPos := 0

-       // Go 1.5 will optimize range([]byte(string)) to skip allocation.
-       for _, c := range []byte(query) {
+       for i := 0; i &amp;lt; len(query); i++ {
+               c := query[i]
                if c != &#39;?&#39; {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It reduces one allocation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    benchmark                  old allocs     new allocs     delta
    BenchmarkInterpolation     4              3              -25.00%
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-5-append-string-to-byte-directly:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.5. &lt;code&gt;append&lt;/code&gt; &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; directly&lt;/h3&gt;

&lt;p&gt;Concatenating slices can be written like &lt;code&gt;buf = append(buf, token...)&lt;/code&gt;. Basically, &lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt; should have same type. But there is one exception: when &lt;code&gt;buf&lt;/code&gt; is &lt;code&gt;[]byte&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt; can be &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@@ -210,17 +210,19 @@ func (mc *mysqlConn) interpolateParams(query string, args []driver.Value) (strin
        argPos := 0

        for i := 0; i &amp;lt; len(query); i++ {
-               c := query[i]
-               if c != &#39;?&#39; {
-                       buf = append(buf, c)
-                       continue
+               q := strings.IndexByte(query[i:], &#39;?&#39;)
+               if q == -1 {
+                       buf = append(buf, query[i:]...)
+                       break
                }
+               buf = append(buf, query[i:i+q]...)
+               i += q

                arg := args[argPos]
                argPos++

                if arg == nil {
-                       buf = append(buf, []byte(&amp;quot;NULL&amp;quot;)...)
+                       buf = append(buf, &amp;quot;NULL&amp;quot;...)
                        continue
                }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t reduce allocation from this change. But I could improve readability a lot.&lt;/p&gt;

&lt;h3 id=&#34;4-6-make-two-same-function-for-byte-and-for-string:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.6. Make two same function: for []byte and for string&lt;/h3&gt;

&lt;p&gt;MySQL requires same escaping for binary and string.&lt;/p&gt;

&lt;p&gt;Sadly, since Go doesn&amp;rsquo;t have &amp;ldquo;read only slice&amp;rdquo;, converting between &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;[]byte&lt;/code&gt; cause allocation and copy. Current compiler can optimize it only for very simple cases.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;ve made mostly same two functions for &lt;code&gt;[]byte&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;.
Generally speaking, duplicated code is evil. But &lt;code&gt;TEXT&lt;/code&gt; and &lt;code&gt;BLOB&lt;/code&gt; column may store large data. I want to avoid allocating and copying large data. So I did evil.&lt;/p&gt;

&lt;p&gt;It reduces one more allocation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    benchmark                  old ns/op     new ns/op     delta
    BenchmarkInterpolation     2463          2118          -14.01%

    benchmark                  old allocs     new allocs     delta
    BenchmarkInterpolation     3              2              -33.33%

    benchmark                  old bytes     new bytes     delta
    BenchmarkInterpolation     496           448           -9.68%
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-7-use-send-receive-buffer-for-scratchpad:29df4c67b192e7f62a16d98407a447bd&#34;&gt;4.7. Use send/receive buffer for scratchpad&lt;/h3&gt;

&lt;p&gt;Last two allocation is: (1) Make scratchpad buffer for interpolate, and (2) convert it to string.&lt;/p&gt;

&lt;p&gt;I can remove them by create MySQL packet directly. But it may breaks separation of packet layer and higher layer. So I didn&amp;rsquo;t it for now.&lt;/p&gt;

&lt;p&gt;Instead, I borrowed send/receive buffer and use it as scratchpad buffer. It reduces one allocation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    benchmark                  old ns/op     new ns/op     delta
    BenchmarkInterpolation     1900          1403          -26.16%

    benchmark                  old allocs     new allocs     delta
    BenchmarkInterpolation     2              1              -50.00%

    benchmark                  old bytes     new bytes     delta
    BenchmarkInterpolation     448           160           -64.29%
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:29df4c67b192e7f62a16d98407a447bd&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Go&amp;rsquo;s compiler is not intelligent compared with gcc or clang. You should use some tips to reduce allocation.&lt;/p&gt;

&lt;p&gt;But Go&amp;rsquo;s runtime is great. I can measure and find allocation quickly. I think it is more important than magical optimization.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to PyMySQL, Mike Bayer (@zzzeek)!</title>
      <link>https://methane.github.io/2015/02/welcome-to-pymysql-zzzeek/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://methane.github.io/2015/02/welcome-to-pymysql-zzzeek/</guid>
      <description>&lt;p&gt;There are three major MySQL Driver in Python: MySQL-python, PyMySQL and MySQL-Connector/Python.&lt;/p&gt;

&lt;p&gt;Since MySQL-python&amp;rsquo;s development is slowdown, I&amp;rsquo;ve made fork named &amp;ldquo;mysqlclient-python&amp;rdquo;.  It supports Python 3 and fixed some bugs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also only active maintainer of PyMySQL. It means I maintains &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of Python-MySQL world.
But I have several interest other than MySQL. I have 9-month old baby. Additionally, I&amp;rsquo;m not good at writing English.
So I&amp;rsquo;m not a good maintainer. Python/MySQL world is stopped compared with Python/PostgreSQL.&lt;/p&gt;

&lt;p&gt;But last weekend, Mike Bayer (@zzzeek, SQLAlchemy developer) posted one mail to PyMySQL Users ML.
It said OpenStack developers considering about moving from MySQL-python to PyMySQL, and ask a question about can I review and accept pull requests from Mike and OpenStack developers.&lt;/p&gt;

&lt;p&gt;The answer is &amp;hellip; No!  I will not have enough time.&lt;/p&gt;

&lt;p&gt;But this is a huge chance to me and Python/MySQL world. SQLAlchemy is one of greatest O/R mapper in Python. OpenStack is one of most active project in Python. I invited him to PyMySQL Organization on Github and he agreed readily.&lt;/p&gt;

&lt;p&gt;Despite I&amp;rsquo;m not a good document/test writer, I have some experience of high performance Python and asynchronous I/O programming.
So I want to improve PyMySQL with Mike and OpenStack.&lt;/p&gt;

&lt;p&gt;On the other hand, I have some ideas about improving mysqlclient-python: Support new async APIs in MariaDB&amp;rsquo;s connectors, use ctypes or cffi to improve performance on PyPy. But I don&amp;rsquo;t have enough time. So I decided not doing them in foreseeable future. It doesn&amp;rsquo;t means mysqlclient-python is deprecated. It will be stable MySQL driver as it has so far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faster unicode access from Python 3.3/C API</title>
      <link>https://methane.github.io/2014/12/fast-utf8-encode/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://methane.github.io/2014/12/fast-utf8-encode/</guid>
      <description>

&lt;p&gt;Python 3.3 intorduces &lt;a href=&#34;https://www.python.org/dev/peps/pep-0393/&#34;&gt;PEP 393 Flexible String Representation&lt;/a&gt;.
This is not only memory efficient, but also make it fast especially extension module.
Before Python 3.3, there are no way to build unicode by byte-to-byte operation.  Since Python 3.3,
you can do it for ASCII or Latin-1 string.&lt;/p&gt;

&lt;h2 id=&#34;pep-393-summarized:f558fad8cd1c1826bc94968b224919bb&#34;&gt;PEP 393 summarized&lt;/h2&gt;

&lt;p&gt;There are some internal representation for unicode.&lt;/p&gt;

&lt;h3 id=&#34;compact-non-ascii:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Compact (non ASCII)&lt;/h3&gt;

&lt;p&gt;Compact representation is basic form of unicode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+--------+--------+------+-------+--------------+-------+-------------+--------------+
| Header | length | hash | *wstr | utf-8 length | *utf8 | wstr_length | DATA ... NUL |
+--------+--------+------+-------+--------------+-------+-------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DATA is array of codepoints.  Each code point have size of 1byte, 2byte or 4byte (KIND).
When unicode only contains latin-1 chars (and contains no-ASCII chars), each codepoint is represented 1byte.&lt;/p&gt;

&lt;p&gt;wstr and utf8 is cache for Python/C API.  When calling &lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; or &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt;, utf8 cache is created.
This is how it encode utf-8:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    if (PyUnicode_UTF8(unicode) == NULL) {
        assert(!PyUnicode_IS_COMPACT_ASCII(unicode));
        bytes = _PyUnicode_AsUTF8String(unicode, &amp;quot;strict&amp;quot;);
        if (bytes == NULL)
            return NULL;
        _PyUnicode_UTF8(unicode) = PyObject_MALLOC(PyBytes_GET_SIZE(bytes) + 1);
        if (_PyUnicode_UTF8(unicode) == NULL) {
            PyErr_NoMemory();
            Py_DECREF(bytes);
            return NULL;
        }
        _PyUnicode_UTF8_LENGTH(unicode) = PyBytes_GET_SIZE(bytes);
        Py_MEMCPY(_PyUnicode_UTF8(unicode),
                  PyBytes_AS_STRING(bytes),
                  _PyUnicode_UTF8_LENGTH(unicode) + 1);
        Py_DECREF(bytes);
    }

    if (psize)
        *psize = PyUnicode_UTF8_LENGTH(unicode);
    return PyUnicode_UTF8(unicode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is slower and inefficient than &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; since it has additional malloc and memcpy.
You should prefer &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; except that you know cache is used later.&lt;/p&gt;

&lt;h3 id=&#34;compact-ascii:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Compact ASCII&lt;/h3&gt;

&lt;p&gt;ASCII string is special:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utf-8 length == length&lt;/li&gt;
&lt;li&gt;utf-8 data == data&lt;/li&gt;
&lt;li&gt;wstr length == length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it is more compact than compact representation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+--------+--------+------+-------+--------------+
| Header | length | hash | *wstr | DATA ... NUL |
+--------+--------+------+-------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; and &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; doesn&amp;rsquo;t create cache.  You can use it free.&lt;/p&gt;

&lt;h3 id=&#34;legacy:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Legacy&lt;/h3&gt;

&lt;p&gt;Legacy representation is only for support deprecated APIs.&lt;/p&gt;

&lt;h2 id=&#34;case-1-ultrajson-https-github-com-esnme-ultrajson:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Case 1: &lt;a href=&#34;https://github.com/esnme/ultrajson&#34;&gt;UltraJSON&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;UltraJSON is fast JSON encoder and decoder.&lt;/p&gt;

&lt;p&gt;Typical JSON contains many ascii strings.  Encoding to utf-8 can be skipped when unicode is Compact ASCII.
Otherwise, I don&amp;rsquo;t use &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; since it can be slower and memory inefficient.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# https://github.com/esnme/ultrajson/pull/159
diff --git a/python/objToJSON.c b/python/objToJSON.c
index e56aa9b..a5b2f62 100644
--- a/python/objToJSON.c
+++ b/python/objToJSON.c
@@ -145,7 +145,17 @@ static void *PyStringToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, siz
 static void *PyUnicodeToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
   PyObject *obj = (PyObject *) _obj;
-  PyObject *newObj = PyUnicode_EncodeUTF8 (PyUnicode_AS_UNICODE(obj), PyUnicode_GET_SIZE(obj), NULL);
+  PyObject *newObj;
+#if (PY_VERSION_HEX &amp;gt;= 0x03030000)
+  if(PyUnicode_IS_COMPACT_ASCII(obj))
+  {
+    Py_ssize_t len;
+    char *data = PyUnicode_AsUTF8AndSize(obj, &amp;amp;len);
+    *_outLen = len;
+    return data;
+  }
+#endif
+  newObj = PyUnicode_AsUTF8String(obj);
   if(!newObj)
   {
     return NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 15.8 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 7.14 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;case-2-meinheld-https-github-com-mopemope-meinheld:f558fad8cd1c1826bc94968b224919bb&#34;&gt;Case 2: &lt;a href=&#34;https://github.com/mopemope/meinheld&#34;&gt;meinheld&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;meinheld is fast WSGI server.  It can be used with &lt;a href=&#34;http://gunicorn.org/&#34;&gt;gunicorn&lt;/a&gt; or &lt;a href=&#34;http://circus.readthedocs.org/&#34;&gt;circus&lt;/a&gt; + &lt;a href=&#34;https://chaussette.readthedocs.org/&#34;&gt;chaussette&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTTP header field name is ASCII.  And &lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/&#34;&gt;PEP 3333&lt;/a&gt; specifies field value should be decoded by latin-1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PyUnicode_New()&lt;/code&gt; accepts maxchar as second argument. When maxchar&amp;lt;128, it creates Compact ASCII unicode.&lt;/p&gt;

&lt;p&gt;Since field name is ASCII, environment name like &lt;code&gt;&amp;quot;HTTP_ACCEPT_ENCODING&amp;quot;&lt;/code&gt; can be created as Compact ASCII.&lt;/p&gt;

&lt;p&gt;field value may contain non-ASCII characters.  So I use &lt;code&gt;PyUnicode_DecodeLatin1()&lt;/code&gt;.  It checks maxchar and create best unicode representation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mopemope/meinheld/blob/c47cdba7a1fe6a80dc8a4f9f2ac5288104f1102f/meinheld/server/response.c#L44-L59&#34;&gt;Here&lt;/a&gt;
is how to create header string in &lt;code&gt;char*&lt;/code&gt; from unicode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;static int
wsgi_to_bytes(PyObject *value, char **data, Py_ssize_t *len)
{
#ifdef PY3
    if (!PyUnicode_Check(value)) {
        PyErr_Format(PyExc_TypeError, &amp;quot;expected unicode object, value &amp;quot;
                     &amp;quot;of type %.200s found&amp;quot;, value-&amp;gt;ob_type-&amp;gt;tp_name);
        return -1;
    }
    if (PyUnicode_READY(value) == -1) {
        return -1;
    }
    if (PyUnicode_KIND(value) != PyUnicode_1BYTE_KIND) {
        PyErr_SetString(PyExc_ValueError,
                        &amp;quot;unicode object contains non latin-1 characters&amp;quot;);
        return -1;
    }
    *len = PyUnicode_GET_SIZE(value);
    *data = (char*)PyUnicode_1BYTE_DATA(value);
    return 0;
#else
    return PyBytes_AsStringAndSize(value, data, len);
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, it convert unicode to bytes with &lt;code&gt;PyUnicode_AsLatin1String()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before this change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
^T^N  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   385.68us   25.67us 843.00us   74.12%
    Req/Sec    12.42k   632.30    13.78k    59.64%
  234475 requests in 10.00s, 39.13MB read
Requests/sec:  23448.18
Transfer/sec:      3.91MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   379.78us   24.96us   0.90ms   73.86%
    Req/Sec    12.46k   639.91    14.00k    52.45%
  235688 requests in 10.00s, 39.33MB read
Requests/sec:  23569.38
Transfer/sec:      3.93MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   388.15us   24.65us 524.00us   73.31%
    Req/Sec    12.43k   623.66    13.78k    55.26%
  234899 requests in 10.00s, 39.20MB read
Requests/sec:  23490.25
Transfer/sec:      3.92MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   339.98us   65.87us   4.33ms   92.45%
    Req/Sec    13.56k     1.43k   15.44k    81.82%
  253189 requests in 10.00s, 42.26MB read
Requests/sec:  25319.67
Transfer/sec:      4.23MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   364.82us   78.85us   1.01ms   84.10%
    Req/Sec    12.99k     1.81k   15.44k    80.63%
  243685 requests in 10.00s, 40.67MB read
Requests/sec:  24368.90
Transfer/sec:      4.07MB
$ ./wrk http://localhost:8000/
Running 10s test @ http://localhost:8000/
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   329.00us   22.40us 464.00us   73.99%
    Req/Sec    13.66k   760.36    15.44k    61.95%
  258730 requests in 10.00s, 43.18MB read
Requests/sec:  25873.60
Transfer/sec:      4.32MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>