<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Python Bytes </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://methane.github.io/posts/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Fri, 26 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Faster unicode access from Python 3.3/C API</title>
      <link>http://methane.github.io/2014/12/fast-utf8-encode/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://methane.github.io/2014/12/fast-utf8-encode/</guid>
      <description>

&lt;p&gt;Python 3.3 intorduces &lt;a href=&#34;https://www.python.org/dev/peps/pep-0393/&#34;&gt;PEP 393 Flexible String Representation&lt;/a&gt;.
This is not only memory efficient, but also make it fast especially extension module.
Before Python 3.3, there are no way to build unicode by byte-to-byte operation.  Since Python 3.3,
you can do it for ASCII or Latin-1 string.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;PEP 393 summarized&lt;/h2&gt;

&lt;p&gt;There are some internal representation for unicode.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Compact (non ASCII)&lt;/h3&gt;

&lt;p&gt;Compact representation is basic form of unicode.&lt;/p&gt;

&lt;pre&gt;
+--------+--------+------+-------+--------------+-------+-------------+--------------+
| Header | length | hash | *wstr | utf-8 length | *utf8 | wstr_length | DATA ... NUL |
+--------+--------+------+-------+--------------+-------+-------------+--------------+
&lt;/pre&gt;

&lt;p&gt;DATA is array of codepoints.  Each code point have size of 1byte, 2byte or 4byte (KIND).
When unicode only contains latin-1 chars (and contains no-ASCII chars), each codepoint is represented 1byte.&lt;/p&gt;

&lt;p&gt;wstr and utf8 is cache for Python/C API.  When calling &lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; or &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt;, utf8 cache is created.
This is how it encode utf-8:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    if (PyUnicode_UTF8(unicode) == NULL) {
        assert(!PyUnicode_IS_COMPACT_ASCII(unicode));
        bytes = _PyUnicode_AsUTF8String(unicode, &amp;quot;strict&amp;quot;);
        if (bytes == NULL)
            return NULL;
        _PyUnicode_UTF8(unicode) = PyObject_MALLOC(PyBytes_GET_SIZE(bytes) + 1);
        if (_PyUnicode_UTF8(unicode) == NULL) {
            PyErr_NoMemory();
            Py_DECREF(bytes);
            return NULL;
        }
        _PyUnicode_UTF8_LENGTH(unicode) = PyBytes_GET_SIZE(bytes);
        Py_MEMCPY(_PyUnicode_UTF8(unicode),
                  PyBytes_AS_STRING(bytes),
                  _PyUnicode_UTF8_LENGTH(unicode) + 1);
        Py_DECREF(bytes);
    }

    if (psize)
        *psize = PyUnicode_UTF8_LENGTH(unicode);
    return PyUnicode_UTF8(unicode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is slower and inefficient than &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; since it has additional malloc and memcpy.
You should prefer &lt;code&gt;PyUnicode_AsUTF8String()&lt;/code&gt; except that you know cache is used later.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Compact ASCII&lt;/h3&gt;

&lt;p&gt;ASCII string is special:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utf-8 length == length&lt;/li&gt;
&lt;li&gt;utf-8 data == data&lt;/li&gt;
&lt;li&gt;wstr length == length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it is more compact than compact representation.&lt;/p&gt;

&lt;pre&gt;
+--------+--------+------+-------+--------------+
| Header | length | hash | *wstr | DATA ... NUL |
+--------+--------+------+-------+--------------+
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PyUnicode_AsUTF8()&lt;/code&gt; and &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; doesn&amp;rsquo;t create cache.  You can use it free.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Legacy&lt;/h3&gt;

&lt;p&gt;Legacy representation is only for support deprecated APIs.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Example 1: ujson&lt;/h2&gt;

&lt;p&gt;Typical JSON contains many ascii strings.  Encoding to utf-8 can be skipped when unicode is Compact ASCII.
Otherwise, I don&amp;rsquo;t use &lt;code&gt;PyUnicode_AsUTF8AndSize()&lt;/code&gt; since it can be slower and memory inefficient.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# https://github.com/esnme/ultrajson/pull/159
diff --git a/python/objToJSON.c b/python/objToJSON.c
index e56aa9b..a5b2f62 100644
--- a/python/objToJSON.c
+++ b/python/objToJSON.c
@@ -145,7 +145,17 @@ static void *PyStringToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, siz
 static void *PyUnicodeToUTF8(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
   PyObject *obj = (PyObject *) _obj;
-  PyObject *newObj = PyUnicode_EncodeUTF8 (PyUnicode_AS_UNICODE(obj), PyUnicode_GET_SIZE(obj), NULL);
+  PyObject *newObj;
+#if (PY_VERSION_HEX &amp;gt;= 0x03030000)
+  if(PyUnicode_IS_COMPACT_ASCII(obj))
+  {
+    Py_ssize_t len;
+    char *data = PyUnicode_AsUTF8AndSize(obj, &amp;amp;len);
+    *_outLen = len;
+    return data;
+  }
+#endif
+  newObj = PyUnicode_AsUTF8String(obj);
   if(!newObj)
   {
     return NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 15.8 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python3.4 -m timeit -n 10000 -s &#39;import ujson; x = [&amp;quot;a&amp;quot;*10]*100&#39; &#39;ujson.dumps(x)&#39;
10000 loops, best of 3: 7.14 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Example 2: meinheld&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>